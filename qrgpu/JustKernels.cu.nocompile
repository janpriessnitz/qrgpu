#include "TuningParams.h"

#define POS(r, c, ld) ((c)*(ld) + (r))

#define real float

__device__ void warpReduce(volatile real *s, int tid) {
    s[tid] += s[tid + 32];
    s[tid] += s[tid + 16];
    s[tid] += s[tid + 8];
    s[tid] += s[tid + 4];
    s[tid] += s[tid + 2];
    s[tid] += s[tid + 1];
}

__global__ void householder_calc_beta(real *A, int m, int ld, int col, real *V, int startc) {
    int x = threadIdx.x;
    int dimX = blockDim.x;
    __shared__ real s[BLOCKDIM_X_HOUSE];
    __shared__ real beta;
    __shared__ real tau;

    s[x] = 0;
    for (unsigned int i = col + x; i < m; i += dimX) {
        s[x] += A[POS(i, col, ld)]*A[POS(i, col, ld)];
    }
    __syncthreads();
    for (unsigned int bound = dimX/2; bound > 32; bound >>= 1) {
        if (x < bound) {
            s[x] += s[x + bound];
        }
        __syncthreads();
    }
    if (x < 32) {
         warpReduce(s, x);
    }

    // s[0] is magX2
    __shared__ real magX;
    __shared__ real sqrtbeta;
    if (x == 0) {
        magX = sqrt(s[0]);

        if (A[POS(col, col, ld)] > 0) {
            real oldVal = A[POS(col, col, ld)];
            real newVal = oldVal + magX;
            real magV2 = s[0] - oldVal*oldVal + newVal*newVal;
            beta = 2/magV2;
            sqrtbeta = sqrt(beta);
            tau = (A[POS(col, col, ld)] + magX)*sqrtbeta;
            A[POS(col, col, ld)] = -magX;

        } else {
            real oldVal = A[POS(col, col, ld)];
            real newVal = oldVal - magX;
            real magV2 = s[0] - oldVal*oldVal + newVal*newVal;
            beta = 2/magV2;
            sqrtbeta = sqrt(beta);
            tau = (A[POS(col, col, ld)] - magX)*sqrtbeta;
            A[POS(col, col, ld)] = magX;
        }
        V[col] = tau;
    }

    __syncthreads();

    for (unsigned int i = x + startc; i < m; i += dimX) {
        if (i < col) V[i] = 0;
        else if (i == col) {
        }
        else {
            V[i] = A[POS(i, col, ld)]*sqrtbeta;
            A[POS(i, col, ld)] *= sqrtbeta/tau;
        }
    }
}

__global__ void calc_and_add_V(real *A, int m, int ld, real *V, real *Vprime) {
    int col = blockIdx.x;
    int x = threadIdx.x;
    int dimX = blockDim.x;

    __shared__ real s[BLOCKDIM_X_V];

    if (x < m) {
        s[x] = V[x]*A[POS(x, col, ld)];
    } else {
        s[x] = 0;
    }
    for (unsigned int i = x + dimX; i < m; i += dimX) {
        s[x] += V[i]*A[POS(i, col, ld)];
    }
    __syncthreads();
    for (unsigned int bound = dimX/2; bound > 32; bound >>= 1) {
        if (x < bound) {
            s[x] += s[x + bound];
        }
        __syncthreads();
    }
    if (x < 32) {
        warpReduce(s, x);
    }
    __syncthreads();

    for (int i = x; i < m; i += dimX) {
        A[POS(i, col, ld)] -= V[i]*s[0];
    }
}

__global__ void calc_W(int m, int startc, real *W, real *Y, real *Yprime, int R) {
    int x = threadIdx.x + blockIdx.x*blockDim.x + startc;
    if (x < m) {
        for (int col = 0; col < R; ++col) {
            real z = 0;
            for (int i = 0; i < col; ++i) {
                z -= W[POS(x, i, m)]*Yprime[POS(i, col, R)];
            }
            z -= Y[POS(x, col, m)];
            W[POS(x, col, m)] = z;
        }
    }
}

__global__ void copy_W(int m, real *Y, real *W) {
    int x = threadIdx.x;
    int dimX = blockDim.x;
    for (int i = x; i < m; i += dimX) {
        W[i] = -Y[i];
    }
}

__global__ void calc_Yprime(real *Y, int m, int startc, int R, real *Yprime) {
    int blockX = blockIdx.x;
    int blockY = blockIdx.y;
    int x = threadIdx.x;
    int dimX = blockDim.x;

    __shared__ real s[BLOCKDIM_X_CALC_YPRIME];

    int col = blockX, endcol = blockY;
    if (col > endcol) return;

    s[x] = 0;  // Yprime
    for (unsigned int i = startc + x; i < m; i += dimX) {
        s[x] += Y[POS(i, col, m)]*Y[POS(i, endcol, m)];
    }
    __syncthreads();
    for (unsigned int bound = dimX/2; bound > 32; bound >>= 1) {
        if (x < bound) {
            s[x] += s[x + bound];
        }
        __syncthreads();
    }
    if (x < 32) {
        warpReduce(s, x);
    }
    __syncthreads();

    if (x == 0) {
        Yprime[POS(col, endcol, R)] = s[0];
    }
}